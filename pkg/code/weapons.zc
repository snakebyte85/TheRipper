class Machete : MyWeapon
{
    Default {
      Weapon.SelectionOrder 3800;
      Weapon.SlotNumber 1;
      Weapon.Kickback 100;
      +WEAPON.WIMPY_WEAPON;
      +WEAPON.MELEEWEAPON;
      Obituary "%o was cut up by %k's machete.";
      }
  States
  {
  Spawn:
    MHTE A -1;
    loop;
  Ready:
    MHTG G 1 A_WeaponReady;
    loop;
  Deselect:
    MHTG G 1 A_Lower;
    loop;
  Select: 
    MHTG G 1 A_Raise;
    loop;
  Fire:
    TNT1 A 0 A_Jump(128,"Fire4");
    TNT1 A 0 A_Jump(128,"Fire3");
    TNT1 A 0 A_Jump(128,"Fire2");
    MHTG A 2 A_PlayWeaponSound("MacheteSwing");
    MHTG B 2;
    MHTG C 4 A_CustomPunch (30,0,0,"MachetePuff");
    MHTG D 2;
    MHTG E 2;
    MHTG F 2;
    MHTG G 2;
    MHTG H 2; 
    MHTG I 2;
    goto Ready;
  Fire2:
    MHT2 A 2 A_PlayWeaponSound("MacheteSwing");
    MHT2 B 2; 
    MHT2 C 4 A_CustomPunch (20,0,0,"MachetePuff");
    MHT2 D 2;
    MHT2 E 2;
    MHT2 F 2;
    MHT2 G 2;
    MHT2 H 2 ;
    goto Ready;
  Fire3:
    MHT3 A 2 A_PlayWeaponSound("MacheteSwing");
    MHT3 B 2;
    MHT3 C 4 A_CustomPunch (10,0,0,"MachetePuff");
    MHT3 D 2;
    MHT3 E 2;
    MHT3 F 2;
    MHT3 G 2;
    TNT1 A 0 A_ReFire;
    goto Ready;
  Fire4:
    MHT4 A 2 A_PlayWeaponSound("MacheteSwing");
    MHT4 B 2;
    MHT4 C 4 A_CustomPunch (10,0,0,"MachetePuff");
    MHT4 D 2;
    MHT4 E 2;
    MHT4 F 2;
    MHT4 G 2;
    TNT1 A 0 A_ReFire;
    goto Ready;          
  }
}

class MachetePuff : Actor
{
    Default { 
      +NOBLOCKMAP;
      +NOGRAVITY;
      +NOEXTREMEDEATH;
      +PUFFONACTORS;
      RenderStyle "Translucent";
      Alpha 0.6;
      SeeSound "MacheteHitThing";
      AttackSound "MacheteHitWall";
      ActiveSound "MacheteSwing";
      VSpeed 1;
      }
  States
  {
  Spawn:
    PUFF ABCD 4;
    Stop;
  }
}  

class PlasmaBolter : MyWeapon
{
    Default {
       Weapon.SelectionOrder 1850;
       Weapon.SlotNumber 2;
       Inventory.PickupMessage "You got the Plasma Bolter!";
       Obituary "%o was fried by %k's Plasma Bolter.";
       Weapon.AmmoType1 "Cell";
       Weapon.AmmoType2 "Cell";
       Weapon.AmmoGive 20;
       Weapon.AmmoUse1 1;
       Weapon.AmmoUse2 2;
       Scale 0.6;
       }
   States
   {
   Spawn:
      PLBT A -1;
      Loop;
   Ready:
      PLBG A 1 A_WeaponReady;
      Loop;
   Deselect:
      PLBG A 1 A_Lower;
      Loop;
   Select:
      PLBG A 1 A_Raise;
      Loop;
   Fire:
      PLBG A 3;
      PLBG B 0 A_Light1;
      PLBG B 0 A_Recoil(0.5);
      PLBG B 4 Bright A_FireCustomMissile("PlasmaBolterShot",0,1,9,3);
      PLBG B 0 A_Recoil(-0.5);
      PLBG C 3 A_Light0;
      PLBG D 2;
      PLBG A 0 A_ReFire;
      Goto Ready;
   }
}

class PlasmaBolterShot : MyWeapon
{
    Default {
       Radius 3;
       Height 4;
       Speed 40;
       Damage 10;
       Scale 0.75;
       PROJECTILE;
       DamageType "Lightning";
       SeeSound "weapons/boltfire";
       //DeathSound "effets/plasma/hit";
       Decal "PlasmaScorchLower";
       RenderStyle "Add";
       }    
   States
   {
   Spawn:
      TNT1 A 2 Bright A_CustomMissile("PlasmaBolterShotTrail",0,0,0,0);
      loop;
   Death:
      BOLT GHI 2 BRIGHT;
      Stop;
   }
}

class PlasmaBolterShotTrail : Actor
{   
    Default {
       Radius 0;
       Height 1;
       Damage 0;
       Speed 0;
       Scale 0.5;
       PROJECTILE;
       RENDERSTYLE "ADD";
       ALPHA 0.50;
       }
   States
   {
   Spawn:
      BOLT ABCDEF 1 Bright;
      Stop;
   }
}

class Bearkiller : MyWeapon
{

    private int currentShots;
    
    Default {
      Weapon.SelectionOrder 350;
      Weapon.SlotNumber 3;
      Weapon.AmmoUse1 2;
      Weapon.AmmoUse2 2;
      Weapon.AmmoGive1 4;
      Weapon.Ammogive2 4;
      Weapon.AmmoType1 "Shell";
      Weapon.AmmoType2 "Shell";
      Inventory.PickupMessage "You got the bearkiller shotgun!";
      Obituary "%o was sent to hell by %k's bearkiller.";
      Decal "BulletChip";
      }
  States
  {
  Spawn:
      DBKF A -1;
      Loop;
  Ready:
    KFDB A 1 A_WeaponReady;
    Loop;
  Deselect:
    KFDB A 1 A_Lower;
    Loop;
  Select:
    KFDB A 1 {
        A_Raise();
        invoker.currentShots=0;
        }
    Loop;
  Fire:
    KFDB A 3;
    KFDB B 0 A_PlayWeaponSound ("KFFIRE");
    KFDB B 0 A_FireBullets (11.2, 7.1, 10, 6, "BulletPuff");
    KFDB B 3 A_GunFlash; 
    KFDB C 5;
    KFDB C 0 A_CheckReload();
    KFDB C 0 {
        invoker.currentShots++;
        if(invoker.currentShots < 2 || invoker.ammo1.amount == 0) {
            return ResolveState("Ready");
        } else {
            return ResolveState("Reload");
        }
    }
  Reload:
    KFDB E 6;
    KFDB E 3 A_Playsound ("KFOPN");
    KFDB SF 3;
    KFDB GF 3 A_SpawnItemEx("ShotgunBulletCasing", 0, 0, 30, 0, frandom(-2,-1), frandom(5,6), 180);
    KFDB S 1;
    KFDB H 7;
    KFDB IMJNOPK 3;
    KFDB L 2;
    KFDB E 7;
    KFDB D 7 A_Playsound ("KFCLS");
    KFDB A 5;
    KFDB A 0 {
        invoker.currentShots=0;
        }
    Goto Ready;
   AltFire:   
    KFDB A 3;
    KFDB B 0 A_PlayWeaponSound ("KFFIRE");
    KFDB B 0 A_FireBullets (11.2, 7.1, 20, 6, "BulletPuff");
    KFDB B 0 A_FireBullets (0, 0, 0, 0);
    KFDB B 3 A_GunFlash; 
    KFDB C 14;
    KFDB D 5 A_CheckReload;
    Goto Reload;
   Flash:
    KFDM B 3 Bright A_Light1;
    Goto LightDone;
   AltFlash:
    KFDM D 3 Bright A_Light2;
    Goto LightDone;
  }
}

class ShotgunBulletCasing : Actor
{
    Default {
      Radius 3;
      Height 2;
      Mass 1;
      Speed 1;
      BounceFactor 0.5;
      BounceCount 5;
      +BOUNCEONWALLS
      +BOUNCEONFLOORS
      +FloorClip;
      +NOBLOCKMAP;
      +NOTELEPORT;
      +CANNOTPUSH;
      }
  States
  {
  Spawn:
    KFAM A -1;
    Stop;
  }
}

class SMG : MyWeapon {

    int currentNumOfSmg;
    private bool doubleSmgInHand;
    
    override void DoEffect() {
        Super.DoEffect();        
        if(!owner || !owner.player) {
			return;
        }   
        if (owner.player.cmd.buttons & BT_ALTATTACK && !(owner.player.oldbuttons & BT_ALTATTACK) ) {
            doubleSmgInHand = !doubleSmgInHand;
        }
    
    }
    
    private state processStateByNumOfSmg(stateLabel singleLabel, stateLabel doubleLabel) {
        if(currentNumOfSmg < 2) {
            return ResolveState(singleLabel);
        }   
        else if(!doubleSmgInHand) {
            return ResolveState(singleLabel);
        } else {
            return ResolveState(doubleLabel);
        }
    }

    default {
       Scale 0.4;
       decal "Bulletchip";
       Weapon.SelectionOrder 500;
       Weapon.SlotNumber 4;
       Inventory.PickupSound "misc/w_pkup";
       Inventory.PickupMessage "You got a SMG!!";
       Weapon.AmmoType "Clip";
       Weapon.AmmoGive 10;
       Weapon.AmmoUse 1;
       Weapon.Kickback 150;
       AttackSound "SMGFIRE";
       }
   States {
    Spawn:
        SMG0 A 1;
        Loop;
    Select:
        TNT1 A 0 {
            return invoker.processStateByNumOfSmg("SelectSingle", "SelectDouble");
            }
    Deselect:
        TNT1 A 0 {
            return invoker.processStateByNumOfSmg("DeselectSingle", "DeselectDouble");
            }
    Ready:
        TNT1 A 0 {
            return invoker.processStateByNumOfSmg("ReadySingle", "ReadyDouble");
            }
    Fire:
        TNT1 A 0 {
            return invoker.processStateByNumOfSmg("FireSingle", "FireDouble");
            }
    SelectSingle:
        SMG1 A 1 A_RAISE;
        Loop;
    DeselectSingle:
        SMG1 A 1 A_LOWER;
        Loop;
    ReadySingle:
        SMG1 A 1 A_WeaponReady;
        Goto Ready;
    FireSingle:
        SMG1 B 1 BRIGHT A_FireBullets(0,0,1,5,"BulletPuff",1);
        SMG1 C 1 BRIGHT;
        SMG1 A 2;
        Goto Ready;
    SelectDouble:
        SMG2 A 1 A_RAISE;
        Loop;
    DeselectDouble:
        SMG2 A 1 A_LOWER;
        Loop;
    ReadyDouble:
        SMG2 A 1 A_WeaponReady;
        Goto Ready;
    FireDouble:
        SMG2 B 1 BRIGHT A_FireBullets(0,0,1,5,"BulletPuff",1);
        SMG2 CA 1 BRIGHT;
        SMG2 D 1 BRIGHT A_FireBullets(0,0,1,5,"BulletPuff",1);
        SMG2 EA 1 BRIGHT;
        Goto Ready;
   }
}

class SMGWeapon : CustomInventory
{ 
    Default {
        //$Category Weapons
       +FLOORCLIP;
       +INVENTORY.AUTOACTIVATE;
       Scale 0.4;
       Inventory.MaxAmount 2;
       Inventory.PickupSound "misc/w_pkup";
       Inventory.PickupMessage "You got a SMG";
       }
   States 
   { 
   Spawn: 
      SMG0 A -1;
      LOOP;
   Pickup: 
      TNT1 A 0 {
        SMG smg = SMG(FindInventory("SMG"));
        if(!smg) {
            A_GiveInventory("SMG", 1);
            A_SelectWeapon("SMG");
            SMG(FindInventory("SMG")).currentNumOfSmg=1;
        } else {
            A_GiveInventory("Clip", 12);
            int currentNum = smg.currentNumOfSmg;
            if(currentNum == 1) {
                smg.currentNumOfSmg = 2;
            }
        }
        A_TakeInventory("SMGWeapon");
        return;
      } 
      stop;
   }
}

class GrenadeLauncher : MyWeapon
{
    Default {
        Inventory.PickupMessage "You got the 40mm Grenade Launcher!.";
        Weapon.Ammogive 10;
        Weapon.AmmoType1 "Grenades";
        Weapon.AmmoType2 "Grenades";
        Weapon.AmmoUse1 1;
        Weapon.AmmoUse2 1;
        Weapon.SelectionOrder 400;
        Weapon.SlotNumber 5;
        +WEAPON.EXPLOSIVE;
        Obituary "%o was blown up by %k's Grenade Launcher.";
        }
	States
	{
	Ready:
		RGLG A 1 A_WeaponReady;
		Loop;
	Select:
		RGLG A 1 A_Raise;
		Loop;
	Deselect:
		RGLG A 1 A_Lower;
		Loop;
	Fire:
		RGLF A 3;
		RGLF A 0 A_GunFlash; 
		RGLF A 0 A_PlayWeaponSound ("40mm/grenfire");
		RGLF B 3;
		RGLF B 0 A_FireCustomMissile ("GrenadeLauncherShot", 0, 1, 1, 10, 1);
		RGLG ABC 3;
		RGLG A 15;
		RGLG A 5 A_ReFire;
		Goto Ready;
	AltFire:
		RGLF A 3;
		RGLF A 0 A_GunFlash;
		RGLF A 0 A_PlayWeaponSound ("40mm/grenfire");
		RGLF B 3;
		RGLF B 0 A_FireCustomMissile ("GrenadeLauncherTimedShot", 0, 1, 1, 10, 1);
		RGLG ABC 3;
		RGLG A 30;
		RGLG A 5 A_ReFire;
		Goto Ready;
	Flash:
		RGLF A 1 BRIGHT A_Light1;
		RGLF B 2 BRIGHT A_Light2;
		Goto LightDone;
	Spawn:
		GLMM A -1;
		Stop;
	}
}

class GrenadeLauncherShot : Actor
{
    Default {
        Radius 8;
        Height 8;        
        Damage 25;
        DamageType "Explosion";
        Speed 50;
        Scale 0.75;
        SeeSound "40mm/grenbounce";
        DeathSound "40mm/grenexplode";
        Projectile;
        -NOGRAVITY;
        }
	States
	{
	Spawn:
		SHRP O 3 bright A_SpawnItemEX("GrenadeSmoke",0,0,0,0,0,0,0,2);
		SHRP O 0 A_CountDown;
		Loop;
	Death:
		SHRP O 1 {
            bool b;
            Actor e;
            [b,e] = A_SpawnItemEx("Explosion");
            let exp = Explosion(e);
            exp.damage=300;
            exp.radius=256;
        }
		Stop;
	}
}

class GrenadeLauncherTimedShot : GrenadeLauncherShot
{
    Default {
        ReactionTime 30;
        Speed 30;
        Damage 1;
        BounceType "Doom";
        +BOUNCEONACTORS;
        +CANBOUNCEWATER;
        BounceSound "40mm/grenbounce";
        }
}

class GrenadeSmoke : Actor
{   
    Default {
       Radius 0;
       Height 1;
       Speed 0;
       Projectile;
       Scale 0.75;
       Renderstyle "Translucent";
       Alpha 0.45;
       }
   States
   {
   Spawn:
      NULL A 3 bright;
      SMK2 ABCDE 2 Bright;
      Stop;
   }
}

class Grenades : Ammo
{
    Default {
        //$Category Weapons
        Inventory.Amount 5;
        Inventory.MaxAmount 50;
        Ammo.BackpackAmount 20;
        Ammo.BackpackMaxAmount 100;
        Inventory.PickupSound "misc/i_pkup";
        Inventory.PickupMessage "Picked up some 40mm grenades.";
        Inventory.Icon "40MMA0";
        }
	States
	{
	Spawn:
		40MM A -1;
		Stop;
	}
}

class GrenadeBox : Grenades
{
    Default {
        Inventory.Amount 20;
        Inventory.PickupMessage "Picked up a box of 40mm grenades.";
        }
	States
	{
	Spawn:
		40BX A -1;
		Stop;
	}
}

class PipebombWeapon : MyWeapon
{

    const PSP_DETONATOR = -50;
    
    private Array<PipebombProjectile> pipebombs;

    Default {
       Inventory.PickupSound "misc/w_pkup";
       Inventory.PickupMessage "You got a pipebomb!";
       Weapon.AmmoType "PipebombAmmo";
       Weapon.AmmoGive 5;
       Weapon.AmmoUse 1;
       Weapon.Kickback 0;
       AttackSound "weapons/pbarm";
       Weapon.SelectionOrder 2600;
       Weapon.SlotNumber 6;
       Scale 0.1;
       +WEAPON.NOALERT;
       +WEAPON.AMMO_OPTIONAL;
       +WEAPON.ALT_AMMO_OPTIONAL;
       +WEAPON.NOAUTOFIRE;
       }
       
   override void DoEffect() {
        Super.DoEffect();        
        if(!owner || !owner.player) {
			return;
        }
        if (!owner.player.ReadyWeapon || owner.player.ReadyWeapon != self)
            return;        
        let pspf = owner.player.FindPSprite(PSP_DETONATOR);
        if (pspf) {
            if(owner.health<1) {
                pspf.Destroy();           
            }
            else if(owner.player.cmd.buttons & BT_ALTATTACK && !(owner.player.oldbuttons & BT_ALTATTACK) && !InStateSequence(pspf.curstate, ResolveState("Detonate")) ) {
                owner.player.setPSprite(PSP_DETONATOR,ResolveState("Detonate"));
            }
        } else if(owner.health>0) {             
            owner.player.setPSprite(PSP_DETONATOR,ResolveState("Detonator"));
        }
    }
      
       
   States
   {
   Spawn:
      PIPB A -1;
      Loop;
   Ready:
      PIPE A 0 {        
        if (CountInv("PipebombAmmo") <= 0) {
            return ResolveState("ReadyNoPipe");
        }
        return ResolveState(null);        
      }
      PIPE A 1 A_WeaponReady();
      Loop;
   ReadyNoPipe:
      TNT1 A 1 {        
        if (CountInv("PipebombAmmo") > 0) {
            return ResolveState("PickAnotherPipe");
        }
        A_WeaponReady();
        return ResolveState(null);
      }
      loop;
   Deselect:
      ---- A 1 A_Lower;
      Loop;
   Select:
      PIPE A 0 {
        if (CountInv("PipebombAmmo") <= 0) {
            return ResolveState("SelectNoPipe");
        }
        return ResolveState(null);
      }  
      PIPE A 1 A_Raise;
      Loop;
   SelectNoPipe: 
     TNT1 A 1 A_Raise;
     loop;   
   Fire:
      PIPE B 0 {
        if (CountInv("PipebombAmmo") <= 0) {
            return ResolveState("Ready");
        }
        return ResolveState(null);        
      }
      PIPE BCDEFGH 1;
      PIPE Z 8;
      PIPE IJKLMNOP 1;
      PIPE P 0 {
            Actor p1,p2;
            [p1,p2] = A_FireProjectile("PipebombProjectile",0,1);
            if (p2) {
                invoker.pipebombs.push(PipebombProjectile(p2));
            }
      }
      PIPE Q 8 A_PlayWeaponSound("weapons/pbthrow");
      PIPE RSTU 1;
      TNT1 A 8;
      TNT1 A 0 { 
            if(CountInv("PipebombAmmo") > 0) {
                return ResolveState("PickAnotherPipe");
            } else {
                return ResolveState("ReadyNoPipe");
            }
      }
    PickAnotherPipe:          
      PIPE HGFEDCB 1;
      PIPE A 8;
      Goto Ready;
      
   Detonator:
      DETO A 1;
      Loop;
        
   Detonate:
      DETO B 2;
      DETO B 0 {
        A_AlertMonsters();
        A_PlayWeaponSound("weapons/pbarm");
        for (int i = 0; i < invoker.pipebombs.Size(); i++)  {
            if (invoker.pipebombs[i]) {
                invoker.pipebombs[i].SetStateLabel("Explosion");
            }
        }
        invoker.pipebombs.Clear();
      }
      DETO C 2;
      DETO B 2;
      DETO A 8;
      goto Detonator;
   }
}

class PipebombProjectile : Actor
{ 

    override void Touch(Actor toucher) {
        if ( toucher == target && vel.x == 0 && vel.y == 0 && vel.z == 0) {
            A_SpawnItemEx("PipebombAmmo", 0, 0, 0);
            Destroy();
        }
    }
    Default {
        Speed 20;
        Radius 11;
		Height 8;
        Scale 0.1;
        BounceType "Doom";
        +MISSILE;
        -NOGRAVITY;
        +SPECIAL;
        +BOUNCEONACTORS;
        Damage 1;
        SeeSound "weapons/pbbounce";
        BounceSound "weapons/pbbounce";
        DeathSound "weapons/pbbounce";
        }
        
    States
    {
    Spawn:
      PIPB A 1;
      Loop;
    Death:
      PIPB A 1;
      loop;
    Explosion:
      PIPB A 1 {
        bool b;
        Actor e;
        [b,e] = A_SpawnItemEx("Explosion");
        let exp = Explosion(e);
        exp.damage=300;
        exp.radius=256;
        }
      Stop;
    }
}

class PipebombAmmo : Ammo
{
    Default {
       //$Category Weapons
       Scale 0.1;
       Inventory.Amount 1;
       Inventory.MaxAmount 25;
       Ammo.BackpackAmount 1;
       Ammo.BackpackMaxAmount 40;
       Inventory.Icon "PIPBB0";
       Inventory.PickupMessage "";
       }
   States
   {
   Spawn:
      PIPB A -1;
      loop;
   }
}

class PipebombBox : CustomInventory
{
    Default {
      //$Category Weapons
      +COUNTITEM;
      +INVENTORY.ALWAYSPICKUP;
      Inventory.PickupMessage "Picked up a box of pipebombs.";
      }
  States
  {
  Spawn:
    PBOX A -1;
    Stop;
  Pickup:
    TNT1 A 0 A_GiveInventory("PipebombWeapon");
    TNT1 A 0 A_GiveInventory("PipebombAmmo",5);
    Stop;
  }
}


class IronBoltAmmo : Ammo
{
    Default{ 
      //$Category Weapons
      Inventory.PickupMessage "Iron Bolts";
      Inventory.Amount 8;
      Inventory.MaxAmount 50;
      Ammo.BackpackAmount 6;
      Ammo.BackpackMaxAmount 100;
      Inventory.Icon "AMM1BOLT";
      }
  States
  {
  Spawn:
    AMM1 A -1;
    Stop;
  }
}

class IronBoltQuiverAmmo : IronBoltAmmo
{
    Default {
      Inventory.PickupMessage "Quiver of Bolts";
      Inventory.Amount 15;
      }
  
  States
  {
  Spawn:
    AMM1 B -1;
    Stop;
  }
}

class IronXBow : MyWeapon
{
    Default {
      Weapon.SelectionOrder 1800;
      Weapon.SlotNumber 7;
      Weapon.AmmoUse 1;
      Weapon.AmmoGive 16;
      Weapon.AmmoType "IronBoltAmmo";
      Weapon.YAdjust 15;
      Inventory.PickupMessage "Iron Crossbow";
      +WEAPON.NOALERT;
      Obituary "%o was punctured by %k's Crossbow";
      }
  
  States
  {
  Spawn:
    XBOW Z -1;
    Stop;
  Ready:
    XBOW A 1 A_WeaponReady;
    Loop;
  Deselect:
    XBOW A 1 A_Lower;
    Loop;
  Select:
    XBOW A 1 A_Raise;
    Loop;
  Fire:
    XBOW B 1 A_PlaySound("BowString");
    XBOW B 5 A_FireCustomMissile ("Ironbolt", 0);
    XBOW CDEFG 4;
    XBOW A 5 A_ReFire;
    goto Ready;
  }
}

class Ironbolt : FastProjectile
{
    Default {
      height 1;
      radius 1;
      DamageFunction Random(4,13)*9;
      speed 36;
      seesound "misc/shot";
      deathsound "misc/shotx";
      PROJECTILE;
      -ACTIVATEIMPACT; 
      -ACTIVATEPCROSS;
      +THRUGHOST;
      +DONTREFLECT;
      +NOEXTREMEDEATH;
      scale 0.5;
      }
  
  states
  {
  Spawn:
    XBLT A -1;
  Death:
    XBLT A 160;
  XDeath:
    XBLT A 4;
    stop;
  }
}

class SawThrower : MyWeapon
{
    Default {
       Weapon.SelectionOrder 120;
       Weapon.SlotNumber 8;
       Inventory.PickupSound "weapons/slot7weapon2";
       Inventory.PickupMessage "You got the Saw Thrower!";
       Obituary "%o was gutted by %k's saw.";
       AttackSound "weapons/throwsawcut";
       Weapon.AmmoType1 "Saws";
       Weapon.AmmoType2 "Saws";
       Weapon.AmmoGive 6;
       Weapon.AmmoUse1 1;
       Weapon.AmmoUse2 1;
       Scale 0.9;
       }    
   States
   {
   Spawn:
      THRS A -1;
      Stop;
   Ready:
      TSWG G 0 A_JumpIfInventory("Saws",1,2);
      TSWG G 1 A_WeaponReady;
      Goto Ready+1;
      TSWG A 1 A_WeaponReady;
      Goto Ready+2;
   Deselect:
      TSWG G 0 A_JumpIfInventory("Saws",1,2);
      TSWG G 1 A_Lower;
      TSWG A 1 A_Lower;
      Goto Deselect+2;
   Select:
      TSWG G 0 A_JumpIfInventory("Saws",1,2);
      TSWG G 1 A_Raise;
      Goto Select+1;
      TSWG A 1 A_Raise;
      Goto Select+2;
   Fire:
      TSWG D 0 A_PlayWeaponSound("weapons/throwsawlaunch");
      TSWG D 0 A_Recoil(1.5);
      TSWG D 4 A_FireCustomMissile("SawShot",0,1,0,3);
      TSWG D 5 A_Recoil(-1.5);
      TSWG D 0 A_JumpIfNoAmmo(5);
      TSWG E 4;
      TSWG F 3;
      TSWG A 3;
      TSWG A 0 A_ReFire;
      Goto Ready;
      TSWG G 7;
      TSWG G 0 A_CheckReload;
      Goto Ready+2;
   AltFire:
      TSWG A 0 A_JumpIfNoAmmo(7);
      TSWG A 8 A_PlayWeaponSound("weapons/throwsawup");
      TSWG B 6;
      TSWG C 3;
      TSWG BB 1 A_CustomPunch(1,0,0,"SawPuff",48);
      TSWG C 0 A_ReFire;
      Goto AltHold+6;
      TSWG G 7;
      TSWG G 0 A_CheckReload;
      Goto Ready+2;
   AltHold:
      TSWG B 0 A_PlayWeaponSound("weapons/throwsawready");
      TSWG BB 1 A_CustomPunch(2,0,0,"SawPuff",48);
      TSWG CC 1 A_CustomPunch(2,0,0,"SawPuff",48);
      TSWG C 0 A_ReFire;
      TSWG B 0 A_PlayWeaponSound("weapons/throwsawready");
      TSWG CBC 2;
      TSWG BCB 3;
      TSWG CB 4;
      TSWG C 6;
      TSWG A 9;
      Goto Ready;
   }
}

class SawPuff : Actor
{
    Default { 
      +NOBLOCKMAP;
      +NOGRAVITY;
      +EXTREMEDEATH;
      +PUFFONACTORS;
      RenderStyle "Translucent";
      Alpha 0.6;
      SeeSound "";
      AttackSound "";
      ActiveSound "";
      }
  States
  {
  Spawn:
    PUFF ABCD 4;
    Stop;
  }
}  

class SawShot : Actor
{
   Default { 
       Radius 4;
       Height 2;
       Speed 20;
       Scale 0.3;
       Damage 3;
       Gravity 0.1;
       //+NOGRAVITY;
       +DROPOFF;
       +MISSILE;
       +ACTIVATEIMPACT;
       +ACTIVATEPCROSS;
       +RIPPER;
       +EXTREMEDEATH;
       +THRUGHOST;
       ExplosionDamage 16;
       ExplosionRadius 8;
       DeathSound "weapons/throwsawhit";
       DamageType "SawShot";
       }
   States
   {
   Spawn:
      SAWS AABBCCDDEEFFGGHHAABBCCDDEEFFGGHHAABBCCDDEEFFGGHHAABBCCDDEEFFGGHH 2 ;//A_SeekerMissile(90,90);
      SAWS A 0 A_Gravity;
      SAWS AABBCCDDEEFFGGHH 2 ;//A_SeekerMissile(90,90);
      Goto Spawn+66;
   Crash:
      SAWE A 1 A_ChangeFlag("RIPPER",0);
   Death:
      SAWE A 1 A_Gravity;
      SAWE A 128 A_CustomMissile("SawSmoke",0,0,180,2);
      SAWE B 96;
      SAWE C 64;
      SAWE DEF 48;
      SAWE F 32;
      SAWE G 16;
      Stop;
   }
}

class SawSmoke : Actor
{
    Default {
       Height 1;
       Radius 1;
       Speed 1;
       +NOBLOCKMAP;
       +NOGRAVITY;
       +DROPOFF;
       +MISSILE;
       +NOTELEPORT;
       +THRUGHOST;
       RenderStyle "Translucent";
       Alpha 0.15;
       Scale 0.1;
       }
   States
   {
   Spawn:
      CSM2 D 2 Bright;
   Death:
      CSM2 EEFFGGHHIIJJKK 1 Bright A_FadeOut(0.01);
      Stop;
   }
}

class Saws : Ammo
{
    Default {
       //$Category Weapons
       Inventory.Amount 3;
       Inventory.MaxAmount 50;
       Ammo.BackpackAmount 3;
       Ammo.BackpackMaxAmount 100;
       Inventory.PickupMessage "Picked up some saws.";
       Inventory.PickupSound "weapons/ammo13";
       Inventory.Icon "SAWA";
       }
   States
   {
   Spawn:
      SAWA A -1;
      Stop;
   }
}

class SawBox : Saws
{
    Default {
       Inventory.Amount 15;
       Inventory.PickupMessage "Picked up a box of saws.";
       }
   States
   {
   Spawn:
      SAWB A -1;
      Stop;
   }
}
