class MyMonster : MyActor {

    Default{
        //$Category Monsters
    }

    enum JumpStatusEnum{
        START,
        UP,
        DOWN,
        END
    }
    
    private JumpStatusEnum jumpStatus;
    
    override void PostBeginPlay()
    {
        Super.PostBeginPlay();
        jumpStatus=END;
    }
    
    /*override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
        Super.Die(source, inflictor, dmgflags, MeansOfDeath);
        if(source is "MyPlayer") {         
            source.A_StartSound("player/afterkill", CHAN_VOICE, CHANF_NOSTOP );
        }
    }*/

    protected double maxDistanceToTriggerJump;
    protected double maxHeightToTriggerJump;
    protected double horizontalThrustJump;
    protected double verticalThrustJump;
    protected int jumpChance;
    
    property MaxDistanceToTriggerJump : maxDistanceToTriggerJump;
    property MaxHeightToTriggerJump : maxHeightToTriggerJump;
    property JumpChance: jumpChance;
    property HorizontalThrustJump: horizontalThrustJump;
    property VerticalThrustJump: verticalThrustJump;
    
    Default {
        MyMonster.MaxDistanceToTriggerJump 600;
        MyMonster.MaxHeightToTriggerJump 300;
        MyMonster.JumpChance 128;
        MyMonster.HorizontalThrustJump 16;
        MyMonster.VerticalThrustJump 16;
    }
    
    protected double GetGroundHeight(){
        double groundHeight = GetZAt();
        bool ok;
        Actor otherActor;
        [ok, otherActor] = TestMobjZ(true);
        if (!otherActor) { 
            return groundHeight;
        } else {
            double otherActorZ = otherActor.pos.z+otherActor.height;
            return max(groundHeight, otherActorZ);
        }
    }
    

    protected bool AmIOnGround() {
        return (abs(GetGroundHeight() - pos.z) < 1);
    }
    
    protected bool DoINeedToJump() {
        if (!target) {
            return false;
        }
        
        if ( AmIOnGround() &&
            random(0,255) <= jumpChance &&
            abs(target.pos.z - pos.z) > MaxStepHeight &&
            abs(target.pos.z - pos.z) < MaxHeightToTriggerJump &&
            Distance2D(target) < MaxDistanceToTriggerJump ) {        
            return true;        
        }        
        return false;
    }
    
    protected void A_Jumping(stateLabel jumpingUpState="JumpingUp", stateLabel jumpingDownState="JumpingDown", stateLabel endJumpingState="See") {
    
        if (AmIOnGround()) {        
            if (jumpStatus == END) {
                jumpStatus = START;
                A_FaceTarget();       
                A_ChangeVelocity(HorizontalThrustJump, 0, VerticalThrustJump, CVF_RELATIVE);
            } else {
                jumpStatus = END;
                SetStateLabel(endJumpingState);
            }
        
        } else if (vel.z > 0) {
            jumpStatus = UP;
            if (vel.x == 0 && vel.y == 0) {
                A_ChangeVelocity(3, 0, 0, CVF_RELATIVE);
            }            
            SetStateLabel(jumpingUpState);
        } else if (vel.z <= 0) {
            jumpStatus = DOWN;            
            SetStateLabel(jumpingDownState);
        }
    }
    
    
}

Class Cockroach : MyMonster {

    protected void A_MyChase()
    {
        if (!target){
            return;
        }
        
        if (DoINeedToJump()) {
            SetStateLabel("JumpingUp");
        }
        else {
            A_Chase();
        }
    }


  protected void plasma() {
    A_SpawnProjectile("PlasmaBolterShot", 40, -5, frandom(-5,5), CMF_OFFSETPITCH, frandom(-2,2));
  }
  
  protected void shotgun() {
    A_StartSound("weapons/bearkiller/fire");
    A_CustomBulletAttack(20, 5, 5, 5, "BulletPuff", 0, CBAF_NORANDOM);
  }
  
  protected Int plasmaMaxShots;
  protected Int plasmaMinShots;
  private Int plasmaCurrentShots;
  property PlasmaMaxShots: plasmaMaxShots;
  property PlasmaMinShots: plasmaMinShots;

  Default
  {
    Radius 20;
    Height 60;
    mass 90;
    MONSTER;
    +FLOORCLIP;
    Scale 0.8;
    SeeSound "enemies/cockroach/see";
    ActiveSound "enemies/cockroach/active";
    PainSound "enemies/cockroach/pain";
    DeathSound "enemies/cockroach/death";
    +AVOIDMELEE;
    +MISSILEMORE;
    MaxDropOffHeight 32;
    Cockroach.PlasmaMinShots 1;
    Cockroach.PlasmaMaxShots 2;
  }
  
  States
  {
  Spawn:
    CRSO ABCD 10 A_Look();
    loop;
  See:
    CRSO ABCD 4 A_MyChase();
    loop;
  Missile:
    goto Plasma;
  Plasma:
    CRSF ABCD 4 A_FaceTarget();
    CRSF E 8 {
        plasmaCurrentShots = 0;
    }   
  PlasmaShot:
    CRSF F 4 Bright plasma();
    CRSF E 8;
    TNT1 A 0 {
        plasmaCurrentShots++;
        if (plasmaCurrentShots < PlasmaMinShots) {
            return A_Jump(255, "PlasmaShot");
        }
        else if (plasmaCurrentShots < PlasmaMaxShots) {
            return A_Jump(128,"PlasmaShot");
        } else {
            return ResolveState(Null);
        }
    }
    CRSF DCBA 4;
    goto See;
  JumpingUp:
    CRSO A 1;
    TNT1 A 0 A_Jumping();
    loop;
  JumpingDown:
    CRSO C 1;
    TNT1 A 0 A_Jumping();
    loop;
  Pain:
    CRSD A 8 A_Pain();
    goto See;
  Death:
    CRSD ABC 8 {
        A_Scream();
        A_NoBlocking();
        }
    CRSD D -1;
    stop;
  }
}

Class CockroachSoldier : Cockroach
{
  Default
  {
    //$Title Cockroach Soldier
    obituary "%o was killed by a disgusting coackroach soldier";
    health 100;
    speed 10;
    painchance 200;    
  }

}

Class CockroachCaptain : Cockroach
{
  Default
  {
    //$Title Cockroach Captain
    obituary "%o was killed by a disgusting coackroach captain";
    health 150;
    speed 15;
    painchance 150;
    Translation "195:213=5:24";
    +MISSILEEVENMORE;
    Cockroach.PlasmaMinShots 2;
    Cockroach.PlasmaMaxShots 3;
  }
  
  States
  {
  Missile:
    TNT1 A 0 A_JumpIfCloser(256, "Shotgun");
    goto Plasma;
  Shotgun:
    CRSA A 4 A_FaceTarget();
    CRSA B 8;
    CRSA C 4 Bright shotgun();
    CRSA BA 4;
    goto See;
  }
}

Class VagMouth : MyMonster {

    Default {
        //$Title Vag Mouth
        Scale 0.5;
        Radius 20;
        Height 60;
        mass 90;
        speed 30;
        MONSTER;
        +FLOORCLIP;
        SeeSound "enemies/vagmouth/see";
        ActiveSound "enemies/vagmouth/active";
        PainSound "enemies/vagmouth/pain";
        DeathSound "enemies/vagmouth/death";
        Attacksound "enemies/vagmouth/attack";
        MaxDropOffHeight 32;
        health 300;
        painchance 150;
     }
     
     States
  {
  Spawn:
    VAGM A 1 A_Look();
    loop;
  See:
    VAGM BCDE 4 A_Chase();
    loop;
  Melee:
    VAGA A 6;
    VAGA B 4 A_CustomMeleeAttack(10);
    VAGA A 6;
    goto see;
  Pain:
    VAGP A 8 A_Pain();
    goto See;
  Death:
    VAGD ABCD 8 {
        A_Scream();
        A_NoBlocking();
        }
    VAGD E -1;
    stop;
  }
}

Class Aracno : MyMonster {

    const MAX_HEIGHT_FOR_CEILING_WALKING = 256.0;

    Default {
        //$Arg0 Spawn on the ceiling
        //$Arg0Type 11
        //$Arg0Enum falsetrue
        Monster;
        +FLOORCLIP;
        +DONTHARMCLASS;
        +NOTARGET;
        +NOEXTREMEDEATH;
    }
    
    override void PostBeginPlay() {
        if(args[0]) {
            bYFlip=true;
            bNOVERTICALMELEERANGE=true;
            bNOGravity=true;
            SetOrigin((pos.x, pos.y, GetZAt(0, 0, 0, GZF_CEILING)), false);
            SetStateLabel("SpawnCeiling");
        }
      }
  
    protected state shouldIGoToCeiling() {
        float ceilingZ = GetZAt(0, 0, 0, GZF_CEILING);
        if (ceilingZ - pos.z < MAX_HEIGHT_FOR_CEILING_WALKING && random(1,10) == 1) {
            return ResolveState("StartJumpUp");
        }
        return ResolveState(null);
      
    }
  
    protected state shouldIJumpDown() { 
        float ceilingZ= GetZAt(0, 0, 0, GZF_CEILING);
        float zdiff = abs(pos.z + height - ceilingZ);
        if(zdiff > 1) {
            if(zdiff < maxstepheight) {
                ThrustThingZ(0, 30, 0, 1);                   
                return ResolveState(null);
            } else {
                return ResolveState("StartJumpDown");
            }
        }
        return ResolveState(null);
    }
    
}

Class Trite : Aracno {

    Default {
      HitObituary "%o was nipped by a Trite";
      Health 50;
      Radius 30;
      Height 40;
      Mass 100;
      Speed 6;
      Scale 0.8;
      PainChance 192;
      PainSound "enemies/Trite/Pain";
      SeeSound "enemies/Trite/Sight";
      DeathSound "enemies/Trite/Death";
      ActiveSound "enemies/Trite/Active";
      MeleeSound "enemies/Trite/MeleeHit";
      MeleeDamage 2;
      MeleeThreshold 64;
      MaxTargetRange 160;
      MinMissileChance 10;
      Damage 2;
      }
      
  States
  {
  Spawn:
    TRIT A 1 A_Look;
    Loop;
  SpawnCeiling:
    TRIT A 1 A_LookEx(0,0,0,0,0,"SeeCeiling");
    Loop;
  OnTheGround:
    TRIT A 6 A_FaceTarget;
    TRIT A 0 A_StartSound("enemies/Trite/Attack");
    TRIT E 6 A_MeleeAttack;
  See:
    TRIT AA 2 A_Chase;
    TRIT A 0 A_StartSound("enemies/Trite/Step");
    TRIT BB 2 A_Chase;
    TRIT B 0 A_StartSound("enemies/Trite/Step");
    TRIT CC 2 A_Chase;
    TRIT C 0 A_StartSound("enemies/Trite/Step");
    TRIT DD 2 A_Chase;
    TRIT D 0 A_StartSound("enemies/Trite/Step");
    TRIT D 0 {
        return shouldIGoToCeiling();        
    }
    Loop;
  Melee:
    TRIT A 6 A_FaceTarget;
    TRIT A 0 A_StartSound("enemies/Trite/Attack");
    TRIT E 6 A_MeleeAttack;
    Goto See;
  Missile:
    TRIT A 0 A_Jump(128, "See");
    TRIT AAA 3 A_FaceTarget;
    TRIT F 0 A_StartSound("enemies/Trite/Attack");
    TRIT F 0 A_SkullAttack;
    TRIT F 10 ThrustThingZ(0, 6, 0, 1);
    TRIT E 8 A_Stop;
    Goto See;
  StartJumpUp:
    TRIT F 0 {
        bNoGravity=true;
        A_StartSound("enemies/Trite/Web");
    }
    TRIT F 10 ThrustThingZ(0, 30, 0, 1);
  JumpingUp:
    TRIT F 1 {
        float ceilingZ= GetZAt(0, 0, 0, GZF_CEILING);
        float zdiff = abs(pos.z + height - ceilingZ);
        if(zdiff < 1) {
            return ResolveState("OnTheCeiling");
        } else if(vel.z < 1) {
            return ResolveState("StartJumpDown");
        }
        return ResolveState(null);
    }
    loop;
  OnTheCeiling:
    TRIT A 0 {
        bYFlip=true;
        bNOVERTICALMELEERANGE=true;
        }
  SeeCeiling:
    TRIT A 0 {        
        return shouldIJumpDown();
    }
    TRIT AA 2 A_Chase("StartJumpDown");
    TRIT A 0 {
        A_StartSound("enemies/Trite/Step");     
        return shouldIJumpDown();
    }
    TRIT BB 2 A_Chase("StartJumpDown");
    TRIT B 0 {
        A_StartSound("enemies/Trite/Step");       
        return shouldIJumpDown();
    }
    TRIT CC 2 A_Chase("StartJumpDown");
    TRIT C 0 {
        A_StartSound("enemies/Trite/Step");       
        return shouldIJumpDown();
    }
    TRIT DD 2 A_Chase("StartJumpDown");
    TRIT D 0 A_StartSound("enemies/Trite/Step");
    Loop;
  StartJumpDown:
    TRIT F 0 {
        bYFlip=false;
        bNoGravity=false;
        bNOVERTICALMELEERANGE=false;
        A_StartSound("enemies/Trite/Web");
    }
    TRIT F 10 ThrustThingZ(0, 6, 1, 1);
  JumpingDown:
    TRIT F 1 {
        if(vel.z < 1) {
            return ResolveState("OnTheGround");
        }
        return ResolveState(null);
    }
    loop;
  Pain:
    TRIT E 3;
    TRIT E 3 A_Pain;
    Goto See;
  Death:
    TRIT G 5 A_Scream;
    TRIT H 0 A_StartSound("enemies/Trite/Splat");
    TRIT H 5 A_NoBlocking;
    TRIT IJK 5;
    Stop;
  Death.Extreme:
    goto Death;
  Death.Explosion:
    goto Death;
  }
}


Class Trypo : Aracno {

    Default {
      HitObituary "%o was nipped by a Trypo";
      Health 30;
      Radius 10;
      Height 15;
      Mass 100;
      Speed 5;
      Scale 0.5;
      PainChance 192;
      PainSound "enemies/Trite/Pain";
      SeeSound "enemies/Trite/Sight";
      DeathSound "enemies/Trite/Death";
      ActiveSound "enemies/Trite/Active";
      MeleeSound "enemies/Trite/MeleeHit";
      MeleeDamage 2;
      MeleeThreshold 64;
      MaxTargetRange 160;
      MinMissileChance 10;
      Damage 2;
      }
      
  States
  {
  Spawn:
    TRYP A 1 A_Look;
    Loop;
  SpawnCeiling:
    TRYP A 1 A_LookEx(0,0,0,0,0,"SeeCeiling");
    Loop;
  OnTheGround:
    TRYF A 6 A_FaceTarget;
    TRYF A 0 A_StartSound("enemies/Trite/Attack");
    TRYF B 6 A_MeleeAttack;
  See:
    TRYP AA 2 A_Chase;
    TRYP A 0 A_StartSound("enemies/Trite/Step");
    TRYP BB 2 A_Chase;
    TRYP B 0 A_StartSound("enemies/Trite/Step");
    TRYP CC 2 A_Chase;
    TRYP C 0 A_StartSound("enemies/Trite/Step");
    TRYP C 0 {
        return shouldIGoToCeiling();        
    }
    Loop;
  Melee:
    TRYF A 6 A_FaceTarget;
    TRYF A 0 A_StartSound("enemies/Trite/Attack");
    TRYF B 6 A_MeleeAttack;
    Goto See;
  Missile:
    TRYF A 0 A_Jump(128, "See");
    TRYF AAA 3 A_FaceTarget;
    TRYF B 0 A_StartSound("enemies/Trite/Attack");
    TRYF B 0 A_SkullAttack;
    TRYF B 10 ThrustThingZ(0, 6, 0, 1);
    TRYF A 8 A_Stop;
    Goto See;
  StartJumpUp:
    TRYJ A 0 {
        bNoGravity=true;
        A_StartSound("enemies/Trite/Web");
    }
    TRYJ A 10 ThrustThingZ(0, 30, 0, 1);
  JumpingUp:
    TRYJ A 1 {
        float ceilingZ= GetZAt(0, 0, 0, GZF_CEILING);
        float zdiff = abs(pos.z + height - ceilingZ);
        if(zdiff < 1) {
            return ResolveState("OnTheCeiling");
        } else if(vel.z < 1) {
            return ResolveState("StartJumpDown");
        }
        return ResolveState(null);
    }
    loop;
  OnTheCeiling:
    TRYP A 0 {
        bYFlip=true;
        bNOVERTICALMELEERANGE=true;
        }
  SeeCeiling:
    TRYP A 0 {        
        return shouldIJumpDown();
    }
    TRYP AA 2 A_Chase("StartJumpDown");
    TRYP A 0 {
        A_StartSound("enemies/Trite/Step");     
        return shouldIJumpDown();
    }
    TRYP BB 2 A_Chase("StartJumpDown");
    TRYP B 0 {
        A_StartSound("enemies/Trite/Step");       
        return shouldIJumpDown();
    }
    TRYP CC 2 A_Chase("StartJumpDown");
    TRYP C 0 {
        A_StartSound("enemies/Trite/Step");       
        return shouldIJumpDown();
    }
    Loop;
  StartJumpDown:
    TRYJ A 0 {
        bYFlip=false;
        bNoGravity=false;
        bNOVERTICALMELEERANGE=false;
        A_StartSound("enemies/Trite/Web");
    }
    TRYJ A 10 ThrustThingZ(0, 6, 1, 1);
  JumpingDown:
    TRYJ A 1 {
        if(vel.z < 1) {
            return ResolveState("OnTheGround");
        }
        return ResolveState(null);
    }
    loop;
  Pain:
    TRPA A 3;
    TRPA A 3 A_Pain;
    Goto See;
  Death:
    TRYD A 5 A_Scream;
    TRYD B 5 A_StartSound("enemies/Trite/Splat");
    TRYD C 5 A_NoBlocking;
    Stop;
  Death.Extreme:
    goto Death;
  Death.Explosion:
    goto Death;
  }
}
  
  class Kamikazi : MyMonster {
  
  Default {
      obituary "%o fell victim to a beheaded kamikazi!";
      health 20;
      radius 16;
      height 56;
      mass 100;
      speed 12;
      MONSTER;
      +FLOORCLIP;
      +QUICKTORETALIATE;
  }
  
  states
  {
  Spawn:
    BKAM A 0 A_StopSoundEx ("soundslot5");
    BKAM AB 10 A_LookEx (0, 0, 0, 1024) ;
    loop;
  Idle:
    BKAM A 0 A_StopSoundEx ("soundslot5");
    BKAM AB 10 A_LookEx (0, 0, 0, 1024);
    BKAM A 0 A_Jump (8, "IdleNoise");
    loop;
  IdleNoise:
    BKAM A 0 A_PlaySound ("enemies/kamikazi/idle");
    goto Idle;
  See:
    BKAM A 0 A_PlaySoundEx ("enemies/kamikazi/scream", "soundslot5", 1);
    BKAM A 2 A_FaceTarget;
    BKAM A 0 A_JumpIfCloser(56, "Melee");
    BKAM A 2 A_Recoil (-5);
    BKAM B 2 A_FaceTarget;
    BKAM A 0 A_JumpIfCloser(56, "Melee");
    BKAM B 2 A_Recoil (-5);
    BKAM C 2 A_FaceTarget;
    BKAM A 0 A_JumpIfCloser(56, "Melee");
    BKAM C 2 A_Recoil (-5);
    BKAM D 2 A_FaceTarget;
    BKAM A 0 A_JumpIfCloser(56, "Melee");
    BKAM D 2 A_Recoil (-5);
  CheckSee:
    BKAM D 0 A_CheckSight ("Navigate");
    goto See;
  Navigate:
    BKAM AABBCCDDAABBCCDDAABBCCDD 2 A_Chase;
    goto CheckSee;
  Melee:
    BKAM A 0 A_Die;
    stop;
  Death.Explosion:
  XDeath:
  Death:
    TNTA A 0 bright {
        bool b;
        Actor e;
        [b,e] = A_SpawnItemEx("Explosion");
        let exp = Explosion(e);
        exp.damage=300;
        exp.radius=256;
        A_NoBlocking();
        A_StopSoundEx("soundslot5");
        }
    goto Super::XDeath;    
  }
  
}


class Incubus : MyMonster {

    Default {
        Health 3000;
        Radius 48;
        Height 64;
        Speed 12;
        PainChance 32;
        ReactionTime 8;
        Mass 2000;
        MONSTER;
        +FLOORCLIP;
        +DONTSQUASH;
        +DONTMORPH;
        +DONTBLAST;
        +NOTELEOTHER;
        +DONTHURTSPECIES;
        SeeSound "enemies/incubus/sight";
        PainSound "enemies/incubus/pain";
        DeathSound "enemies/incubus/death";
        ActiveSound "enemies/incubus/active";
        Obituary "%o was destroyed by an Incubus.";
    }
    States
    {
    Spawn: 
        INCB AD 10 A_Look;
        Loop;
    See: 
        INCB AAABBB 4 A_Chase;
        INCB A 0 A_PlaySound("enemies/incubus/walk");
        INCB CCCDDD 4 A_Chase;
        INCB C 0 A_PlaySound("enemies/incubus/walk");
        Loop;
    Missile:
        INCB E 0 A_Jump(192,"MissilePhoton");
        INCB E 0 A_PlaySound("enemies/incubus/attack1");
        INCB EEE 8 A_FaceTarget;
        INCB F 8 Bright A_CustomMissile("IncubusHomingRocketShot",35,42,359,0);
        INCB E 4 A_FaceTarget;
        INCB E 4 A_CPosReFire;
        INCB G 8 Bright A_CustomMissile("IncubusHomingRocketShot",34,-39,1,0);
        INCB E 4 A_FaceTarget;
        INCB E 4 A_CPosReFire;
        INCB F 8 Bright A_CustomMissile("IncubusHomingRocketShot",35,42,359,0);
        INCB E 4 A_FaceTarget;
        INCB E 4 A_CPosReFire;
        INCB G 8 Bright A_CustomMissile("IncubusHomingRocketShot",34,-39,1,0);
        INCB EE 8 A_FaceTarget;
        Goto See;
    MissilePhoton:
        INCB E 0 A_PlaySound("enemies/incubus/attack2");
        INCB EEE 8 A_FaceTarget;
        INCB H 0 A_CustomMissile("IncubusPhotonShot",72,-12,359,0);
        INCB H 5 Bright A_CustomMissile("IncubusPhotonShot",72,12,1,0);
        INCB E 5 A_FaceTarget;
        INCB H 0 A_CustomMissile("IncubusPhotonShot",72,-12,359,0);
        INCB H 5 Bright A_CustomMissile("IncubusPhotonShot",72,12,1,0);
        INCB E 5 A_FaceTarget;
        INCB H 0 A_CustomMissile("IncubusPhotonShot",72,-12,359,0);
        INCB H 5 Bright A_CustomMissile("IncubusPhotonShot",72,12,1,0);
        INCB EE 8 A_FaceTarget;
        Goto See;
    Pain:
        INCB D 5;
        INCB C 5 A_Pain;
        Goto See;
    Death:
    Death.Explosion:
    XDeath:
        INCB I 12 A_Scream;
        INCB J 12;
        INCB K 8 A_Fall;
        INCB LM 8;
        INCB N -1;
        Stop;
    }
}

Class HomingRocketTrail : Actor {

    Default {
       Radius 4;
       Height 3;
       Speed 1;
       Scale 0.6;
       +NOGRAVITY;
       +NOTELEPORT;
       RenderStyle "Translucent";
       Alpha 0.33;
     }
   States
   {
   Spawn:
      MTRL A 2;
      MTRL BCD 3;
      MTRL E 4 A_SetTranslucent(0.2);
      MTRL F 5 A_SetTranslucent(0.1);
      Stop;
   }
}

class IncubusHomingRocketShot : Actor {
    
    Default {
        SeeSound "weapons/rocklf";
        Radius 11;
        Height 8;
        Speed 23;
        Damage 15;
        PROJECTILE;
        ExplosionDamage 96;
        ExplosionRadius 78;
        DeathSound "weapons/homingexplode";
    }
   States {
      Spawn:
        MSLH A 1 Bright A_SeekerMissile(5,0);
        MSLH A 1 Bright A_SpawnItemEx("HomingRocketTrail",0,0,0,1,0,0,0,128);
        Loop;
      Death:
        TNTA A 0 {
            bool b;
            Actor e;
            [b,e] = A_SpawnItemEx("Explosion");
            let exp = Explosion(e);
            exp.damage=300;
            exp.radius=256;
        }
        Stop;      
   }
}

class IncubusPhotonShot : Actor {

    Default {
       Radius 3;
       Height 4;
       Speed 35;
       Damage 12;
       Scale 0.5;
       PROJECTILE;
       +STRIFEDAMAGE;
       SeeSound "incubus/shot";
       DeathSound "incubus/hit";
       Renderstyle "Add";
       Alpha 1.0;
       }
   States
   {
   Spawn:
      INCS AB 3 Bright;
      Loop;
   Death:
      INCS C 6 Bright;
      INCS D 6 Bright;
      INCS E 6 Bright;
      Stop;
   }
}

Class MechaManiac : MyMonster {

    private int shots;
    const MAX_SHOTS = 10;

  Default
  {
    Health 1000;
    Radius 20;
    Height 60;
    mass 90;
    Speed 15;    
    PainChance 192;
    MONSTER;
    +FLOORCLIP;
    Scale 0.8;
    SeeSound "enemies/mecha/see";
    ActiveSound "enemies/mecha/active";
    PainSound "enemies/mecha/pain";
    DeathSound "enemies/mecha/death";
    +AVOIDMELEE;
    +MISSILEMORE;
    MaxDropOffHeight 0;
  }
  
  States
  {
  Spawn:
    MECH ABCD 10 A_Look();
    loop;
  See:
    MECH ABCD 6 A_Chase();
    loop;
  Missile:
    MECF A 6 {
        shots=0;
        A_FaceTarget();
        }
  MissileLoop:
    MECF B 2;
    MECF C 2 Bright { 
        A_CustomBulletAttack(20, 5, 1, 3, "BulletPuff", 0, CBAF_NORANDOM);
        A_StartSound("weapons/m60/fire");
        }
    MECF D 2;
    MECF E 2 Bright {
        A_CustomBulletAttack(20, 5, 1, 3, "BulletPuff", 0, CBAF_NORANDOM);
        A_StartSound("weapons/m60/fire");
        }
    MECF A 0 {
        shots = shots + 2;
        if(shots >= MAX_SHOTS) {
            return ResolveState("See");
        }
        return ResolveState("MissileLoop");
    }
  Pain:
    MECP A 8 A_Pain();
    goto See;
  Death:
    MECD ABCDEF 5 {
        A_Scream();
        A_NoBlocking();
        }
    MECD G -1;
    stop;
  }
}

